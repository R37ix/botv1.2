import logging
import re
from datetime import datetime, time
from typing import Optional, List, Dict, Any

from telegram import Update, constants
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    filters, CallbackContext
)
from telegram.error import BadRequest

from database import db
import config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


class ClassBot:
    def __init__(self):
        self.application = None

    async def is_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        if update.effective_chat.type == 'private':
            return update.effective_user.id in config.ADMIN_IDS

        try:
            member = await update.effective_chat.get_member(update.effective_user.id)
            return member.status in ['administrator', 'creator']
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤: {e}")
            return False

    # Basic commands
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞.\n\n"
            "üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ø–æ–º–æ—â—å\n"
            "/get_hw - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            "/get_ready_hw - –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            "/duty - —É–∑–Ω–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö\n"
            "/schedule - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
        )
        await update.message.reply_text(welcome_text)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "üìñ –ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞ v1.2:\n\n"
            "–î–ª—è –≤—Å–µ—Ö:\n"
            "/get_hw - –ø–æ–ª—É—á–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            "/get_ready_hw - –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ\n"
            "/duty - —É–∑–Ω–∞—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö\n"
            "/schedule - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n\n"
            "–î–ª—è –∞–¥–º–∏–Ω–æ–≤:\n"
            "/post_hw [—Ç–µ–∫—Å—Ç] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–ó\n"
            "/set_duty @user1 @user2 - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–µ–∂—É—Ä–Ω—ã—Ö\n"
            "/post_schedule [—Ç–µ–∫—Å—Ç] - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
            "/get_chat_log - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥ —á–∞—Ç–∞\n"
            "https://nash10Aklacc.ru/ - –Ω–∞—à —Å–∞–π—Ç, —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–æ—Ç–∞\n"
            "/get_user_log @user - –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        )
        await update.message.reply_text(help_text)

    # Homework functions
    async def post_hw(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
            return

        homework_text = ' '.join(context.args)
        chat_id = update.effective_chat.id

        db.save_homework(chat_id, homework_text)
        await update.message.reply_text("‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    async def get_hw(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        homework = db.get_homework(chat_id)

        if homework:
            await update.message.reply_text(f"üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{homework}")
        else:
            await update.message.reply_text("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.")


# ---------------------------------------------------------------------------------------------
    async def post_ready_hw(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –≥–æ—Ç–æ–≤–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è!")
            return

        ready_homework_text = ' '.join(context.args)
        chat_id = update.effective_chat.id

        db.save_homework(chat_id, ready_homework_text)
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    async def get_hw(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        ready_homework = db.get_ready_homework(chat_id)

        if ready_homework:
            await update.message.reply_text(f"üìö –ì–æ—Ç–æ–≤–æ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{ready_homework}")
        else:
            await update.message.reply_text("üìö –ì–æ—Ç–æ–≤–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–µ—Ç.")

    # Duty functions
    async def set_duty(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–µ–∂—É—Ä–Ω—ã—Ö"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if len(context.args) < 2:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–≤—É—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ @username!")
            return

        user1 = context.args[0].lstrip('@')
        user2 = context.args[1].lstrip('@')

        db.save_duty(update.effective_chat.id, 0, user1, 0, user2)
        await update.message.reply_text(f"‚úÖ –î–µ–∂—É—Ä–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: @{user1} –∏ @{user2}")

    async def duty(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑ –¥–µ–∂—É—Ä–Ω—ã—Ö"""
        duty = db.get_duty(update.effective_chat.id)

        if duty:
            user1, user2 = duty
            await update.message.reply_text(f"üë• –î–µ–∂—É—Ä–Ω—ã–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: @{user1} –∏ @{user2}")
        else:
            await update.message.reply_text("üë• –î–µ–∂—É—Ä–Ω—ã–µ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.")

    # Schedule functions
    async def post_schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!")
            return

        schedule_text = ' '.join(context.args)
        chat_id = update.effective_chat.id

        db.save_schedule(chat_id, schedule_text)
        await update.message.reply_text("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")

    async def schedule(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
        chat_id = update.effective_chat.id
        schedule = db.get_schedule(chat_id)

        if schedule:
            await update.message.reply_text(f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n{schedule}")
        else:
            await update.message.reply_text("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

    # Reminder functions
  #  async def remind(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
      #  """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
      #  if not await self.is_admin(update, context):
        #    await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
        #    return

      #  if len(context.args) < 2:
       #     await update.message.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /remind HH:MM —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
       #     return

      #  time_pattern = r'(\d{1,2}):(\d{2})'
      #  match = re.match(time_pattern, context.args[0])

      #  if not match:
      #      await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HH:MM")
      #      return

      #  hours, minutes = map(int, match.groups())
       # reminder_text = ' '.join(context.args[1:])

     #   job_id = f"reminder_{update.effective_chat.id}_{datetime.now().timestamp()}"

     #   db.save_reminder(update.effective_chat.id, reminder_text, f"{hours:02d}:{minutes:02d}", job_id)

      #  context.job_queue.run_daily(
      #      self.send_reminder,
      #      time=time(hour=hours, minute=minutes),
   #         data=job_id,
       #     name=job_id
       # )

     #   await update.message.reply_text(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {hours:02d}:{minutes:02d}")

  #  async def send_reminder(self, context: CallbackContext):
  #      """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
   #     job_id = context.job.data
   #     reminder_data = db.get_reminder(job_id)

   #     if reminder_data:
    #        chat_id, message = reminder_data
    #        await context.bot.send_message(chat_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}")

    # Archive functions
    async def archive_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê—Ä—Ö–∏–≤–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            message = update.effective_message
            user = update.effective_user
            chat = update.effective_chat

            message_data = {
                'message_id': message.message_id,
                'chat_id': chat.id,
                'chat_type': chat.type,
                'chat_title': chat.title if hasattr(chat, 'title') else None,
                'chat_username': chat.username if hasattr(chat, 'username') else None,
                'user_id': user.id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'phone_number': None,
                'photo_id': None,
                'text': message.text or message.caption or '',
                'date': message.date
            }

            db.save_message(message_data)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    async def get_chat_log(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∞ —á–∞—Ç–∞"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        chat_id = update.effective_chat.id
        messages = db.get_chat_log(chat_id)

        if not messages:
            await update.message.reply_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return

        log_text = f"–õ–æ–≥ —á–∞—Ç–∞ {chat_id}\n{'=' * 50}\n\n"
        for msg_date, username, first_name, last_name, text in messages:
            name = f"@{username}" if username else f"{first_name} {last_name}".strip()
            log_text += f"[{msg_date}] {name}: {text}\n"

        try:
            await context.bot.send_document(
                chat_id=update.effective_user.id,
                document=log_text.encode('utf-8'),
                filename=f"chat_log_{chat_id}.txt"
            )
            await update.message.reply_text("üìÅ –õ–æ–≥ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except BadRequest:
            await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞!")

    async def get_user_log(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not await self.is_admin(update, context):
            await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return

        username = context.args[0].lstrip('@')
        user_id = 123456789

        messages = db.get_user_log(user_id)

        if not messages:
            await update.message.reply_text("üìù –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∞—Ä—Ö–∏–≤–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return

        log_text = f"–õ–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n{'=' * 50}\n\n"
        for msg_date, chat_title, text in messages:
            log_text += f"[{msg_date}] {chat_title}: {text}\n"

        try:
            await context.bot.send_document(
                chat_id=update.effective_user.id,
                document=log_text.encode('utf-8'),
                filename=f"user_log_{username}.txt"
            )
            await update.message.reply_text("üìÅ –õ–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≤–∞—à–∏ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except BadRequest:
            await update.message.reply_text("‚ùå –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–Ω–∞—á–∞–ª–∞!")

    # Utility functions
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(msg="Exception while handling an update:", exc_info=context.error)

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("post_hw", self.post_hw))
        self.application.add_handler(CommandHandler("get_hw", self.get_hw))
        self.application.add_handler(CommandHandler("set_duty", self.set_duty))
        self.application.add_handler(CommandHandler("duty", self.duty))
        self.application.add_handler(CommandHandler("post_schedule", self.post_schedule))
        self.application.add_handler(CommandHandler("schedule", self.schedule))
        self.application.add_handler(CommandHandler("get_chat_log", self.get_chat_log))
        self.application.add_handler(CommandHandler("get_user_log", self.get_user_log))
        self.application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, self.archive_message))
        self.application.add_error_handler(self.error_handler)

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.application = Application.builder().token(config.BOT_TOKEN).build()
        self.setup_handlers()
        db.clear_old_duty()
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)


def main():
    bot = ClassBot()
    bot.run()


if __name__ == "__main__":
    main()